-----------------------------------------------------------
    Components
-----------------------------------------------------------
- event loop
	- waits for something to happen and then acts on the event
	- registers, executes, and cancels delayed calls
	- delegates function calls to a pool of threads
	- creates subprocesses and transports for communication with another program
- coroutines
	- event handler
	- special function that gives up control without losing state
	- extension of a generator
	- advantage of not using much memory
	- call to it returns coroutine object
		- executed by event loop
- future
	- object representing result of work to be done
	- event loop watch futures and wait for them to finish
- task
	- coroutine wrapper
	- subclass of Future
	- can be scheduled with event loop

-----------------------------------------------------------
    async and await
-----------------------------------------------------------
- used to define native coroutine
	- async def coroutine():
	- same as decorating with `@asyncio.coroutine`
- improvement in 3.5 over `yield from`
	- can just `await` instead

-----------------------------------------------------------
    Coroutines
-----------------------------------------------------------
- 2 different related concepts
	- function defining a coroutine
		- async def 
		- @asyncio.coroutine
	- object obtained by calling a coroutine function
- must be scheduled
	- does not run when called
	- await or yield from another coroutine
	- ensure_future or create_task


-----------------------------------------------------------
    Tasks
-----------------------------------------------------------
- subclass of Future
	- wrapper around a coroutine
	- track when coroutine finishes processing
	- other coroutines can take the result of a task after processing
- tasks are meant for long-running background coroutines
- can be cancelled

-----------------------------------------------------------
    delays
-----------------------------------------------------------
- event loop can call functions with delays
	- loop.call_soon
	- loop.call_later

-----------------------------------------------------------
    asyncio.ensure_future vs BaseEventLoop.create_task
-----------------------------------------------------------
- both create Task from coroutine
- use ensure_future if input could be a coroutine or a Future
	- want result to for sure be a Future
		eg. to call cancel()
	- provide an API that accepts either a coroutine or a Future
- use create_task if input is a coroutine
	- third party event loops can use their own subclass of Task
		- so should not construct Task object with constructor

-----------------------------------------------------------
    Transports and Protocols
-----------------------------------------------------------
- callback based API
- transports abstract communication channels
	eg. TCP, UDP, SSL, subprocess pipes
	- not instantiated directly by user
		- let AbstractEventLoop method create it
	- always paired with a protocol instance
		- protocol can call the transport's methods
		- events occurring on the transport triggers protocol's callbacks
- protocols are user defined classes to parse incoming data and ask for outgoing data
	- can subclass asyncio base classes
	- should provide implementation for certain callbacks
		- called by transport on certain events
		- connection_made(transport)
			- store transport
			- no other callback will be called before this
		- connection_lost(exc)
			- exception or None for normal termination
			- no other callback will be called after this
		- pipe_data_received / data_recieved / datagram_received
			- transport dependent methods for getting data
- coroutines can be scheduled but cannot be awaited inside protocols
	- use stream objects instead for reliable execution order
	- for UDP, can create actual handler as coroutine which the callback schedules

-----------------------------------------------------------
    Streams
-----------------------------------------------------------
- higher level concept than transports and protocols
	- meant to integrate them into async programming
	- results in much cleaner code
		- no implicit callbacks
- StreamReader
	- coroutines for all read* functions
- StreamWriter
	- wraps a transport
		- exposes write*, close of transport
	- adds drain() which is a coroutine
		- to be called after write and can be awaited
- inherently ordered
	- only suitable for TCP or other ordered communication
	- does not support UDP

-----------------------------------------------------------
    Queue
-----------------------------------------------------------
- coordinates producer and consumer coroutines
- put and get are coroutines
